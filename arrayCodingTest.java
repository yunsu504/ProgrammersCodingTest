/*컴파일 옵션
K번째수
문제 설명
배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.

예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면

array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.
2에서 나온 배열의 3번째 숫자는 5입니다.
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.
입출력 예
array	commands	return
[1, 5, 2, 6, 3, 7, 4]	[[2, 5, 3], [4, 4, 1], [1, 7, 3]]	[5, 6, 3]
입출력 예 설명
[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.
[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.
[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.
*/


import java.util.*;

class Solution {
    public ArrayList solution(int[] array, int[][] commands) {
    ArrayList answer = new ArrayList<Integer>();
   int size = 0;
      int[] noSort = new int[size];
         for(int i = 0; i < commands.length; i++){
             for(int j = 0; j < commands[i].length; j++){
               size = commands[i][1]-commands[i][0]+1;
                  if(size>1){
                  noSort = Arrays.copyOfRange(array, commands[i][0]-1, commands[i][1]);
                   Arrays.sort(noSort);
                  }
                  if(size==1){
                   noSort[0] = array[commands[i][0]-1];    
                   }
             }//for j
              answer.add(noSort[commands[i][2]-1]);
        }// for i
      return answer;
   }
}
/*실행 결과
같은 코드로 채점한 결과가 있습니다.
정확성  테스트
테스트 1 〉	통과 (0.51ms, 52.5MB)
테스트 2 〉	실패 (런타임 에러)
테스트 3 〉	통과 (1.54ms, 52.4MB)
테스트 4 〉	통과 (0.43ms, 53.2MB)
테스트 5 〉	통과 (0.52ms, 53MB)
테스트 6 〉	통과 (0.49ms, 51.9MB)
테스트 7 〉	실패 (런타임 에러)
채점 결과
정확성: 71.4
합계: 71.4 / 100.0*/